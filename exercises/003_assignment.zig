//
// 看来我们有点过分地把所有的东西都变成了“const u8”！
//
//     "const" 值不能改变。
//     "u"     类型是“无符号”的，不能存储负值。
//     "8"     表示类型的大小是 8 位。
//
// 例子: foo 不能改变（它是常量）
//       bar 可以改变（它是变量）
//
//     const foo: u8 = 20;
//     var bar: u8 = 20;
//
// 例子: foo 不能为负，可以存储 0 到 255
//       bar 可以为负，可以存储 -128 到 127
//
//     const foo: u8 = 20;
//     const bar: i8 = -20;
//
// 例子: foo 可以存储 8 位（0 到 255）
//       bar 可以存储 16 位（0 到 65535）
//
//     const foo: u8 = 20;
//     const bar: u16 = 2000;
//
// 你可以想到任何这些的组合：
//
//     u32 可以存储 0 到 4294967295
//     i64 可以存储 -9223372036854775808 到 9223372036854775807
//
// 请修复这个程序，使得类型可以存储所需的值。
// 并且错误消失！
//
const std = @import("std");

pub fn main() void {
    var n: u8 = 50;
    n = n + 5;

    const pi: u32 = 314159;

    const negative_eleven: i8 = -11;

    // 下一行没有错误，只是解释：
    // 或许你之前注意到了，print 函数需要两个参数。
    // 现在它会更有意义：第一个参数是一个字符串。字符串可能包含占位符’{}'，
    // 而第二个参数是一个“匿名列表字面量”（现在不用担心这个！） 用来打印的值。
    std.debug.print("{} {} {}\n", .{ n, pi, negative_eleven });
}
